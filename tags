!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BALANCED_BUCKETIZER_H	include/freedom/balanced_bucketizer.hpp	9;"	d
BETAMT_EV_RATIO_SELECTOR_H	include/freedom/betamt_ev_ratio_selector.hpp	9;"	d
BUCKETIZER_H	include/freedom/bucketizer.hpp	9;"	d
BUCKET_COLLECTION_H	include/freedom/bucket_collection.hpp	9;"	d
BUCKET_HAND_H	include/freedom/bucket_hand.hpp	9;"	d
BalancedBucketizer	include/freedom/balanced_bucketizer.hpp	/^class BalancedBucketizer : public Bucketizer {$/;"	c	namespace:Freedom5
BetamtEVRatioSelector	include/freedom/betamt_ev_ratio_selector.hpp	/^  BetamtEVRatioSelector(double _threshold) : threshold(_threshold) {}$/;"	f	class:Freedom5::BetamtEVRatioSelector
BetamtEVRatioSelector	include/freedom/betamt_ev_ratio_selector.hpp	/^class BetamtEVRatioSelector : public ISelectionStrategy<Context, Config> {$/;"	c	namespace:Freedom5
Bucket	include/freedom/bucket_collection.hpp	/^  typedef vector<BucketHand> Bucket;$/;"	t	class:Freedom5::BucketCollection
BucketCollection	include/freedom/bucket_collection.hpp	/^class BucketCollection {$/;"	c	namespace:Freedom5
BucketCollection	src/bucket_collection.cpp	/^BucketCollection::BucketCollection(int _nb_buckets)$/;"	f	class:Freedom5::BucketCollection
BucketCollection	src/bucket_collection.cpp	/^BucketCollection::BucketCollection(vector<Bucket> _buckets)$/;"	f	class:Freedom5::BucketCollection
BucketHand	include/freedom/bucket_hand.hpp	/^  BucketHand(Hand _hand, double _equity)$/;"	f	class:Freedom5::BucketHand
BucketHand	include/freedom/bucket_hand.hpp	/^  BucketHand(int c1, int c2, double _equity)$/;"	f	class:Freedom5::BucketHand
BucketHand	include/freedom/bucket_hand.hpp	/^class BucketHand : public poker::Hand {$/;"	c	namespace:Freedom5
Bucketizer	include/freedom/bucketizer.hpp	/^class Bucketizer {$/;"	c	namespace:Freedom5
CONST_LEAF_NODE_H	include/freedom/const_leaf_node.hpp	9;"	d
CPP_FILES	makefile	/^CPP_FILES = $(wildcard src\/*.cpp)$/;"	m
CXX	makefile	/^CXX = clang++ -g$/;"	m
CXXFLAGS	makefile	/^CXXFLAGS=-m64 -static -ansi -std=c++11 \\$/;"	m
ConstantLeafNode	include/freedom/const_leaf_node.hpp	/^  ConstantLeafNode(Context *_context, INode *_parent, Config *_config,$/;"	f	class:Freedom5::ConstantLeafNode
ConstantLeafNode	include/freedom/const_leaf_node.hpp	/^class ConstantLeafNode : public LeafNode {$/;"	c	namespace:Freedom5
DECISION_NODE_H	include/freedom/decision_node.hpp	9;"	d
DEP_FILES	makefile	/^DEP_FILES = $(OBJ_FILES:.o=.d)$/;"	m
DOC_OUT	makefile	/^DOC_OUT = doc$/;"	m
DOUBLE_OPERATIONS_H	include/freedom/double_operations.hpp	10;"	d
DecisionNode	include/freedom/decision_node.hpp	/^  DecisionNode(const Context &_context, Config *_config, node_t *_parent)$/;"	f	class:Freedom5::DecisionNode
DecisionNode	include/freedom/decision_node.hpp	/^class DecisionNode : public InnerNode<Context, Config> {$/;"	c	namespace:Freedom5
EHS2RangePredictor	include/freedom/ehs2_range_predictor.hpp	/^class EHS2RangePredictor : public RangePredictor{$/;"	c	namespace:Freedom5
EHS2RangePredictor	src/ehs2_range_predictor.cpp	/^EHS2RangePredictor::EHS2RangePredictor(ECalc *_calc, int _nb_samples,$/;"	f	class:Freedom5::EHS2RangePredictor
EHS2_RANGE_PREDICTOR_H	include/freedom/ehs2_range_predictor.hpp	9;"	d
EVPotRatioSelector	include/freedom/ev_pot_ratio_selector.hpp	/^class EVPotRatioSelector : public MaxFunctionSelector<Context, Config> {$/;"	c	namespace:Freedom5
EV_AMT_RATIO_SELECTOR_H	include/freedom/ev_pot_ratio_selector.hpp	9;"	d
EXPONENTIAL_BUCKETIZER_H	include/freedom/exponential_bucketizer.hpp	9;"	d
EXPONENTIAL_DISTRIBUTION_H	include/freedom/exponential_distribution.hpp	9;"	d
Euler	include/freedom/exponential_distribution.hpp	/^  const double Euler = std::exp(1.0);$/;"	m	class:Freedom5::ExponentialDistribution
Euler	include/freedom/gaussian_distribution.hpp	/^  const double Euler = std::exp(1.0);$/;"	m	class:Freedom5::GaussianDistribution
ExponentialBucketizer	include/freedom/exponential_bucketizer.hpp	/^class ExponentialBucketizer {$/;"	c	namespace:Freedom5
ExponentialDistribution	include/freedom/exponential_distribution.hpp	/^  ExponentialDistribution(double _lambda) : lambda(_lambda) {}$/;"	f	class:Freedom5::ExponentialDistribution
ExponentialDistribution	include/freedom/exponential_distribution.hpp	/^class ExponentialDistribution {$/;"	c	namespace:Freedom5
FACTION_SEQUENCE_H	include/freedom/faction_sequence.hpp	9;"	d
FActionSequence	include/freedom/faction_sequence.hpp	/^class FActionSequence : public ActionSequence {$/;"	c	namespace:Freedom5
FActionSequence	src/faction_sequence.cpp	/^FActionSequence::FActionSequence(const Value &data) : ActionSequence() {$/;"	f	class:Freedom5::FActionSequence
FCONFIG_H	include/freedom/fconfig.hpp	9;"	d
FCONTEXT_CONFIG_H	include/freedom/fcontext_config.hpp	9;"	d
FCONTEXT_H	include/freedom/fcontext.hpp	9;"	d
FConfig	include/freedom/fconfig.hpp	/^  FConfig(double _time_s, int _ecalc_nb_samples, ECalc *_ecalc,$/;"	f	class:Freedom5::FConfig
FConfig	include/freedom/fconfig.hpp	/^  FConfig(sstrategy_t *_move_select_strat, bool seed = true,$/;"	f	class:Freedom5::FConfig
FConfig	include/freedom/fconfig.hpp	/^class FConfig {$/;"	c	namespace:Freedom5
FConfig	src/fconfig.cpp	/^    FConfig::FConfig(const Value &data, ECalc *_ecalc, bool seed){$/;"	f	class:Freedom5::FConfig
FContext	include/freedom/fcontext.hpp	/^class FContext{$/;"	c	namespace:Freedom5
FContext	src/fcontext.cpp	/^FContext::FContext(amt_bb _pot, amt_bb _highest_bet, int _index_bot,$/;"	f	class:Freedom5::FContext
FContext	src/fcontext.cpp	/^FContext::FContext(const FContext &fc)$/;"	f	class:Freedom5::FContext
FContext	src/fcontext.cpp	/^FContext::FContext(const Value &data, FContextConfig *_config)$/;"	f	class:Freedom5::FContext
FContext	src/fcontext.cpp	/^FContext::FContext(int _index_bot, int _index_utg, int _index_button,$/;"	f	class:Freedom5::FContext
FContextConfig	include/freedom/fcontext_config.hpp	/^  FContextConfig(Hand _bot_hand, int _betting_rounds, vector<unsigned> _board,$/;"	f	struct:Freedom5::FContextConfig
FContextConfig	include/freedom/fcontext_config.hpp	/^  FContextConfig(const FContextConfig &oc)$/;"	f	struct:Freedom5::FContextConfig
FContextConfig	include/freedom/fcontext_config.hpp	/^struct FContextConfig {$/;"	s	namespace:Freedom5
FContextConfig	src/fcontext_config.cpp	/^FContextConfig::FContextConfig(const Value &data)$/;"	f	class:Freedom5::FContextConfig
FINAL_MOVE_SELECTOR_H	include/freedom/final_move_selector.hpp	9;"	d
FPLAYER_H	include/freedom/fplayer.hpp	9;"	d
FPlayer	include/freedom/fplayer.hpp	/^  FPlayer(const FPlayer &p)$/;"	f	class:Freedom5::FPlayer
FPlayer	include/freedom/fplayer.hpp	/^  FPlayer(string _name)$/;"	f	class:Freedom5::FPlayer
FPlayer	include/freedom/fplayer.hpp	/^  FPlayer(string _name, bb _bankroll)$/;"	f	class:Freedom5::FPlayer
FPlayer	include/freedom/fplayer.hpp	/^  FPlayer(string _name, bb _bankroll, Handlist *_handlist)$/;"	f	class:Freedom5::FPlayer
FPlayer	include/freedom/fplayer.hpp	/^  FPlayer(string _name, bb _bankroll, vector<bb> _invested)$/;"	f	class:Freedom5::FPlayer
FPlayer	include/freedom/fplayer.hpp	/^  FPlayer(string _name, bb _bankroll, vector<bb> _invested,$/;"	f	class:Freedom5::FPlayer
FPlayer	include/freedom/fplayer.hpp	/^class FPlayer {$/;"	c	namespace:Freedom5
FPlayer	src/fplayer.cpp	/^FPlayer::FPlayer(const Value &data) {$/;"	f	class:Freedom5::FPlayer
FREEDOM_H	include/freedom/freedom.hpp	9;"	d
FSEAT_H	include/freedom/fseat.hpp	9;"	d
FSeat	include/freedom/fseat.hpp	/^  FSeat(const FSeat &s) : status(s.status), player(s.player) {}$/;"	f	class:Freedom5::FSeat
FSeat	include/freedom/fseat.hpp	/^class FSeat {$/;"	c	namespace:Freedom5
FSeat	src/fseat.cpp	/^FSeat::FSeat(FPlayer _player, Poker::SeatType::Enum _type,$/;"	f	class:Freedom5::FSeat
FSeat	src/fseat.cpp	/^FSeat::FSeat(const Value &data)$/;"	f	class:Freedom5::FSeat
FinalMoveSelector	include/freedom/final_move_selector.hpp	/^  FinalMoveSelector(double _ev_threshold, double _big_raise_ev_multiplicator,$/;"	f	class:Freedom5::FinalMoveSelector
FinalMoveSelector	include/freedom/final_move_selector.hpp	/^class FinalMoveSelector : public ISelectionStrategy<Context, Config> {$/;"	c	namespace:Freedom5
Freedom	include/freedom/freedom.hpp	/^class Freedom {$/;"	c	namespace:Freedom5
Freedom	src/freedom.cpp	/^Freedom::Freedom(Handranks* handranks): handranks(handranks){$/;"	f	class:Freedom5::Freedom
Freedom5	include/freedom/balanced_bucketizer.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/betamt_ev_ratio_selector.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/bucket_collection.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/bucket_hand.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/bucketizer.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/const_leaf_node.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/decision_node.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/ehs2_range_predictor.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/ev_pot_ratio_selector.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/exponential_bucketizer.hpp	/^namespace Freedom5{$/;"	n
Freedom5	include/freedom/exponential_distribution.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/faction_sequence.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/fconfig.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/fcontext.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/fcontext_config.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/final_move_selector.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/fplayer.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/freedom.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/fseat.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/gaussian_distribution.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/histogramm.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/model.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/model_selector.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/opponent_node.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/phase_histogramm.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/range_predictor.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/round_histogramm.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/schema_exception.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/showdown_eval.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/showdown_node.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/strategy_map.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/weighted_bucket_handlist.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	include/freedom/weighted_showdown_eval.hpp	/^namespace Freedom5 {$/;"	n
Freedom5	src/balanced_bucketizer.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/bucket_collection.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/const_leaf_node.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/decision_node.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/ehs2_range_predictor.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/exponential_bucketizer.cpp	/^namespace Freedom5{$/;"	n	file:
Freedom5	src/faction_sequence.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/fconfig.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/fcontext.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/fcontext_config.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/fplayer.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/freedom.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/fseat.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/histogramm.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/model_selector.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/opponent_node.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/phase_histogramm.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/range_predictor.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/round_histogramm.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/showdown_eval.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/weighted_bucket_handlist.cpp	/^namespace Freedom5 {$/;"	n	file:
Freedom5	src/weighted_showdown_eval.cpp	/^namespace Freedom5 {$/;"	n	file:
GAUSSIAN_DISTRIBUTION_H	include/freedom/gaussian_distribution.hpp	9;"	d
GaussianDistribution	include/freedom/gaussian_distribution.hpp	/^  GaussianDistribution(double _u, double _o) : u(_u), o(_o), base(1.0 \/ (_o * sqrt2PI)) {}$/;"	f	class:Freedom5::GaussianDistribution
GaussianDistribution	include/freedom/gaussian_distribution.hpp	/^class GaussianDistribution {$/;"	c	namespace:Freedom5
HISTOGRAMM_H	include/freedom/histogramm.hpp	9;"	d
Histogramm	include/freedom/histogramm.hpp	/^class Histogramm : public Model {$/;"	c	namespace:Freedom5
Histogramm	src/histogramm.cpp	/^    Histogramm::Histogramm() {}$/;"	f	class:Freedom5::Histogramm
Histogramm	src/histogramm.cpp	/^    Histogramm::Histogramm(const Histogramm &oh) {$/;"	f	class:Freedom5::Histogramm
Histogramm	src/histogramm.cpp	/^    Histogramm::Histogramm(const Value &data) {$/;"	f	class:Freedom5::Histogramm
Histogramm	src/histogramm.cpp	/^    Histogramm::Histogramm(string _name, vector<PhaseHistogramm> _histogramm)$/;"	f	class:Freedom5::Histogramm
INCLUDES	makefile	/^INCLUDES=-isystem ..\/..\/dep\/decimal_for_cpp\/include \\$/;"	m
LIB_OUT	makefile	/^LIB_OUT = lib\/$(target)\/libfreedom.a$/;"	m
MAX_TRIES	include/freedom/weighted_bucket_handlist.hpp	/^  const unsigned MAX_TRIES = 25;$/;"	m	class:Freedom5::WeightedBucketHandlist
MODEL_H	include/freedom/model.hpp	9;"	d
MODEL_SELECTOR_H	include/freedom/model_selector.hpp	9;"	d
Model	include/freedom/model.hpp	/^  Model() {}$/;"	f	class:Freedom5::Model
Model	include/freedom/model.hpp	/^  Model(string _name) : name(_name) {}$/;"	f	class:Freedom5::Model
Model	include/freedom/model.hpp	/^class Model {$/;"	c	namespace:Freedom5
ModelSelector	include/freedom/model_selector.hpp	/^            ModelSelector():model(NULL){}$/;"	f	class:Freedom5::ModelSelector
ModelSelector	include/freedom/model_selector.hpp	/^    class ModelSelector : public ISelectionStrategy<Context, Config> {$/;"	c	namespace:Freedom5
ModelSelector	src/model_selector.cpp	/^    ModelSelector::ModelSelector(Model *_model) : model(_model) {}$/;"	f	class:Freedom5::ModelSelector
OBJ_FILES	makefile	/^OBJ_FILES = $(addprefix obj\/$(target)\/,$(notdir $(CPP_FILES:.cpp=.o)))$/;"	m
OPPONENT_NODE_H	include/freedom/opponent_node.hpp	9;"	d
OpponentNode	include/freedom/opponent_node.hpp	/^  OpponentNode(Context *_context, INode *_parent, Config *_config)$/;"	f	class:Freedom5::OpponentNode
OpponentNode	include/freedom/opponent_node.hpp	/^class OpponentNode : public InnerNode {$/;"	c	namespace:Freedom5
PAction	include/freedom/model_selector.hpp	/^        PAction():$/;"	f	struct:Freedom5::PAction
PAction	include/freedom/model_selector.hpp	/^        PAction(node_t* _node, Action _action, double _prob):$/;"	f	struct:Freedom5::PAction
PAction	include/freedom/model_selector.hpp	/^    struct PAction{$/;"	s	namespace:Freedom5
PHASE_HISTOGRAMM_H	include/freedom/phase_histogramm.hpp	9;"	d
PI	include/freedom/gaussian_distribution.hpp	/^  const double PI = M_PI;$/;"	m	class:Freedom5::GaussianDistribution
PhaseHistogramm	include/freedom/phase_histogramm.hpp	/^  PhaseHistogramm(int betting_rounds = 5):$/;"	f	class:Freedom5::PhaseHistogramm
PhaseHistogramm	include/freedom/phase_histogramm.hpp	/^class PhaseHistogramm {$/;"	c	namespace:Freedom5
PhaseHistogramm	src/phase_histogramm.cpp	/^PhaseHistogramm::PhaseHistogramm(const PhaseHistogramm &oph)$/;"	f	class:Freedom5::PhaseHistogramm
PhaseHistogramm	src/phase_histogramm.cpp	/^PhaseHistogramm::PhaseHistogramm(const Value &data) {$/;"	f	class:Freedom5::PhaseHistogramm
PhaseHistogramm	src/phase_histogramm.cpp	/^PhaseHistogramm::PhaseHistogramm(vector<RoundHistogramm> _round_data)$/;"	f	class:Freedom5::PhaseHistogramm
RANGE_PREDICTOR_H	include/freedom/range_predictor.hpp	9;"	d
RAPIDJSON_ASSERT	include/freedom/schema_exception.hpp	33;"	d
ROUND_HISTOGRAMM_H	include/freedom/round_histogramm.hpp	9;"	d
RangePredictor	include/freedom/range_predictor.hpp	/^class RangePredictor {$/;"	c	namespace:Freedom5
RangePredictor	src/range_predictor.cpp	/^RangePredictor::RangePredictor(ECalc *_calc, int _nb_samples,$/;"	f	class:Freedom5::RangePredictor
RoundHistogramm	include/freedom/round_histogramm.hpp	/^class RoundHistogramm {$/;"	c	namespace:Freedom5
RoundHistogramm	src/round_histogramm.cpp	/^RoundHistogramm::RoundHistogramm(const Value &data) {$/;"	f	class:Freedom5::RoundHistogramm
RoundHistogramm	src/round_histogramm.cpp	/^RoundHistogramm::RoundHistogramm(double _nb_fold, double _nb_check,$/;"	f	class:Freedom5::RoundHistogramm
SCHEMA_EXCEPTION_H	include/freedom/schema_exception.hpp	9;"	d
SHOWDOWN_EVAL_STRATEGY_H	include/freedom/showdown_eval.hpp	9;"	d
SHOWDOWN_NODE_H	include/freedom/showdown_node.hpp	9;"	d
STRATEGY_MAP_H	include/freedom/strategy_map.hpp	9;"	d
ShowdownEval	include/freedom/showdown_eval.hpp	/^  ShowdownEval() {}$/;"	f	class:Freedom5::ShowdownEval
ShowdownEval	include/freedom/showdown_eval.hpp	/^class ShowdownEval : public mcts::ISimulationStrategy<FContext> {$/;"	c	namespace:Freedom5
ShowdownEval	src/showdown_eval.cpp	/^ShowdownEval::ShowdownEval(ECalc *_ecalc, int _samples)$/;"	f	class:Freedom5::ShowdownEval
ShowdownNode	include/freedom/showdown_node.hpp	/^  ShowdownNode(Context *_context, INode *_parent, Config *_config)$/;"	f	class:Freedom5::ShowdownNode
ShowdownNode	include/freedom/showdown_node.hpp	/^class ShowdownNode : public LeafNode {$/;"	c	namespace:Freedom5
StrategyMap	include/freedom/strategy_map.hpp	/^namespace StrategyMap {$/;"	n	namespace:Freedom5
Threshold	include/freedom/range_predictor.hpp	/^  Threshold(double prf, double pof) : preflop(prf), postflop(pof) {}$/;"	f	struct:Freedom5::Threshold
Threshold	include/freedom/range_predictor.hpp	/^struct Threshold {$/;"	s	namespace:Freedom5
WEIGHTED_BUCKET_HANDLIST_H	include/freedom/weighted_bucket_handlist.hpp	9;"	d
WEIGHTED_SHOWDOWN_EVAL_H	include/freedom/weighted_showdown_eval.hpp	9;"	d
WeightedBucketHandlist	include/freedom/weighted_bucket_handlist.hpp	/^  WeightedBucketHandlist(BucketCollection _buckets, vector<double> _weights)$/;"	f	class:Freedom5::WeightedBucketHandlist
WeightedBucketHandlist	include/freedom/weighted_bucket_handlist.hpp	/^  WeightedBucketHandlist(BucketCollection _buckets, vector<double> _weights,$/;"	f	class:Freedom5::WeightedBucketHandlist
WeightedBucketHandlist	include/freedom/weighted_bucket_handlist.hpp	/^  WeightedBucketHandlist(const WeightedBucketHandlist &wbh,$/;"	f	class:Freedom5::WeightedBucketHandlist
WeightedBucketHandlist	include/freedom/weighted_bucket_handlist.hpp	/^class WeightedBucketHandlist : public ecalc::Handlist {$/;"	c	namespace:Freedom5
WeightedShowdownEval	include/freedom/weighted_showdown_eval.hpp	/^  WeightedShowdownEval() {}$/;"	f	class:Freedom5::WeightedShowdownEval
WeightedShowdownEval	include/freedom/weighted_showdown_eval.hpp	/^class WeightedShowdownEval : public ShowdownEval {$/;"	c	namespace:Freedom5
WeightedShowdownEval	src/weighted_showdown_eval.cpp	/^WeightedShowdownEval::WeightedShowdownEval(ECalc *_ecalc, int _samples)$/;"	f	class:Freedom5::WeightedShowdownEval
_predict_range	include/freedom/range_predictor.hpp	/^  vector<BucketHand> _predict_range(ActionSequence actions, Model *model,$/;"	f	class:Freedom5::RangePredictor
action	include/freedom/model_selector.hpp	/^        Action action;$/;"	m	struct:Freedom5::PAction
action_sequence	include/freedom/fplayer.hpp	/^  ActionSequence action_sequence;$/;"	m	class:Freedom5::FPlayer
active_seat	src/fcontext.cpp	/^FSeat &FContext::active_seat() { return seats[index_active]; }$/;"	f	class:Freedom5::FContext
apply_exp	src/weighted_showdown_eval.cpp	/^void WeightedShowdownEval::apply_exp(vector<double> &vec, double lambda, double multiplicator) const{$/;"	f	class:Freedom5::WeightedShowdownEval
apply_gauss	src/weighted_showdown_eval.cpp	/^void WeightedShowdownEval::apply_gauss(vector<double> &vec, double mean,$/;"	f	class:Freedom5::WeightedShowdownEval
available_actions	src/fcontext.cpp	/^vector<Action> FContext::available_actions() const {$/;"	f	class:Freedom5::FContext
backpropagate	include/freedom/showdown_node.hpp	/^  virtual void backpropagate(double value) {$/;"	f	class:Freedom5::ShowdownNode
backpropagate	src/const_leaf_node.cpp	/^void ConstantLeafNode::backpropagate(double value) {$/;"	f	class:Freedom5::ConstantLeafNode
bankroll	include/freedom/fplayer.hpp	/^  bb bankroll;$/;"	m	class:Freedom5::FPlayer
base	include/freedom/gaussian_distribution.hpp	/^  double base;$/;"	m	class:Freedom5::GaussianDistribution
bet_sizes	include/freedom/fcontext_config.hpp	/^  vector<double> bet_sizes;$/;"	m	struct:Freedom5::FContextConfig
betting_round	include/freedom/fcontext.hpp	/^  int betting_round;$/;"	m	class:Freedom5::FContext
betting_rounds	include/freedom/fcontext_config.hpp	/^  int betting_rounds;$/;"	m	struct:Freedom5::FContextConfig
big_raise_ev_multiplicator	include/freedom/final_move_selector.hpp	/^  double big_raise_ev_multiplicator;$/;"	m	class:Freedom5::FinalMoveSelector
big_raise_multiplicator	include/freedom/final_move_selector.hpp	/^  double big_raise_multiplicator;$/;"	m	class:Freedom5::FinalMoveSelector
board	include/freedom/fcontext_config.hpp	/^  vector<unsigned> board;$/;"	m	struct:Freedom5::FContextConfig
board_by_phase	src/range_predictor.cpp	/^vector<int> RangePredictor::board_by_phase(vector<unsigned> complete_board,$/;"	f	class:Freedom5::RangePredictor
bot_hand	include/freedom/fcontext_config.hpp	/^  Hand bot_hand;$/;"	m	struct:Freedom5::FContextConfig
bot_seat	src/fcontext.cpp	/^FSeat &FContext::bot_seat() { return seats[index_bot]; }$/;"	f	class:Freedom5::FContext
bot_seat	src/fcontext.cpp	/^const FSeat &FContext::bot_seat() const { return seats[index_bot]; }$/;"	f	class:Freedom5::FContext
bucket_range	src/bucket_collection.cpp	/^BucketCollection BucketCollection::bucket_range(int lower_bound, int upper_bound){$/;"	f	class:Freedom5::BucketCollection
buckets	include/freedom/bucket_collection.hpp	/^  vector<Bucket> buckets;$/;"	m	class:Freedom5::BucketCollection
buckets	include/freedom/weighted_bucket_handlist.hpp	/^  vector<ecalc::ArrayHandlist> buckets;$/;"	m	class:Freedom5::WeightedBucketHandlist
build_cache	src/range_predictor.cpp	/^string RangePredictor::build_cache(vector<unsigned> board, vector<unsigned> deadcards) {$/;"	f	class:Freedom5::RangePredictor
cache	include/freedom/range_predictor.hpp	/^  std::unordered_map<string, vector<BucketHand> > cache;$/;"	m	class:Freedom5::RangePredictor
cache	include/freedom/weighted_showdown_eval.hpp	/^    std::map<string, WeightedBucketHandlist* > cache;$/;"	m	class:Freedom5::WeightedShowdownEval
calculate_best_hand_percentage	src/range_predictor.cpp	/^double RangePredictor::calculate_best_hand_percentage(double p_fold) const {$/;"	f	class:Freedom5::RangePredictor
calculate_handstrengths	src/range_predictor.cpp	/^void RangePredictor::calculate_handstrengths(vector<BucketHand> &hands,$/;"	f	class:Freedom5::RangePredictor
calculate_lower_bound	src/range_predictor.cpp	/^int RangePredictor::calculate_lower_bound(Action action, PhaseType::Enum phase,$/;"	f	class:Freedom5::RangePredictor
calculate_subset	src/range_predictor.cpp	/^void RangePredictor::calculate_subset(vector<BucketHand> &hands,$/;"	f	class:Freedom5::RangePredictor
calculate_upper_bound	src/range_predictor.cpp	/^int RangePredictor::calculate_upper_bound(Action action, PhaseType::Enum phase,$/;"	f	class:Freedom5::RangePredictor
choose_discrete_index	src/model_selector.cpp	/^    int ModelSelector::choose_discrete_index(generator_t &gen, vector<double> probs){$/;"	f	class:Freedom5::ModelSelector
clone	include/freedom/fcontext.hpp	/^  virtual FContext clone() const { return FContext(*this); }$/;"	f	class:Freedom5::FContext
clone	include/freedom/histogramm.hpp	/^  virtual Model* clone(){$/;"	f	class:Freedom5::Histogramm
config	include/freedom/fcontext.hpp	/^  FContextConfig *config;$/;"	m	class:Freedom5::FContext
count_hands	src/bucket_collection.cpp	/^int BucketCollection::count_hands() const {$/;"	f	class:Freedom5::BucketCollection
dead_by_phase	src/range_predictor.cpp	/^vector<int> RangePredictor::dead_by_phase(vector<unsigned> complete_board,$/;"	f	class:Freedom5::RangePredictor
decision_backprop_strat	include/freedom/fconfig.hpp	/^  IBackpropagationStrategy *decision_backprop_strat;$/;"	m	class:Freedom5::FConfig
decision_selection_strat	include/freedom/fconfig.hpp	/^  sstrategy_t *decision_selection_strat;$/;"	m	class:Freedom5::FConfig
dist	include/freedom/weighted_bucket_handlist.hpp	/^  std::discrete_distribution<int> dist;$/;"	m	class:Freedom5::WeightedBucketHandlist
double_cmp_equal	include/freedom/double_operations.hpp	/^inline bool double_cmp_equal( double a, double b, double eps ){$/;"	f
double_greater	include/freedom/double_operations.hpp	/^inline bool double_greater( double a, double b, double eps ){$/;"	f
double_lesser	include/freedom/double_operations.hpp	/^inline bool double_lesser( double a, double b, double eps ){$/;"	f
dump_tree	include/freedom/fconfig.hpp	/^  bool dump_tree;$/;"	m	class:Freedom5::FConfig
ecalc	include/freedom/fconfig.hpp	/^  ECalc *ecalc;$/;"	m	class:Freedom5::FConfig
ecalc	include/freedom/freedom.hpp	/^  ECalc *ecalc;$/;"	m	class:Freedom5::Freedom
ecalc	include/freedom/range_predictor.hpp	/^  ECalc *ecalc;$/;"	m	class:Freedom5::RangePredictor
ecalc	include/freedom/showdown_eval.hpp	/^  ECalc *ecalc;$/;"	m	class:Freedom5::ShowdownEval
ecalc2	include/freedom/range_predictor.hpp	/^  ECalc *ecalc2;$/;"	m	class:Freedom5::RangePredictor
ecalc_nb_samples	include/freedom/fconfig.hpp	/^  int ecalc_nb_samples;$/;"	m	class:Freedom5::FConfig
enum_available_actions	src/fcontext.cpp	/^vector<ActionType::Enum> FContext::enum_available_actions() const {$/;"	f	class:Freedom5::FContext
equity	include/freedom/bucket_hand.hpp	/^  double equity;$/;"	m	class:Freedom5::BucketHand
equity_first	src/ehs2_range_predictor.cpp	/^double EHS2RangePredictor::equity_first(vector<Handlist *> lists,$/;"	f	class:Freedom5::EHS2RangePredictor
equity_first	src/range_predictor.cpp	/^double RangePredictor::equity_first(vector<Handlist *> lists, vector<unsigned> board,$/;"	f	class:Freedom5::RangePredictor
ev_threshold	include/freedom/final_move_selector.hpp	/^  double ev_threshold;$/;"	m	class:Freedom5::FinalMoveSelector
evaluate	include/freedom/ev_pot_ratio_selector.hpp	/^  virtual double evaluate(node_t *node) {$/;"	f	class:Freedom5::EVPotRatioSelector
expand	src/decision_node.cpp	/^void DecisionNode::expand() {$/;"	f	class:Freedom5::DecisionNode
expand	src/opponent_node.cpp	/^    void OpponentNode::expand() {$/;"	f	class:Freedom5::OpponentNode
generate_cache_id	src/range_predictor.cpp	/^string RangePredictor::generate_cache_id(vector<unsigned> board,$/;"	f	class:Freedom5::RangePredictor
generate_handranges	src/freedom.cpp	/^void Freedom::generate_handranges(FContext &context, FConfig *config) {$/;"	f	class:Freedom5::Freedom
generator_t	include/freedom/fconfig.hpp	/^  typedef std::mt19937 generator_t;$/;"	t	class:Freedom5::FConfig
generator_t	include/freedom/model_selector.hpp	/^        typedef std::mt19937 generator_t;$/;"	t	class:Freedom5::ModelSelector
get	src/round_histogramm.cpp	/^double RoundHistogramm::get(ActionType::Enum action) {$/;"	f	class:Freedom5::RoundHistogramm
getCheckBetProbabilities	src/histogramm.cpp	/^        Histogramm::getCheckBetProbabilities(FContext *gs, int index_seat) const {$/;"	f	class:Freedom5::Histogramm
getCheckBetProbabilities	src/round_histogramm.cpp	/^tuple<double, double> RoundHistogramm::getCheckBetProbabilities() const {$/;"	f	class:Freedom5::RoundHistogramm
getFoldCallProbabilities	src/histogramm.cpp	/^        Histogramm::getFoldCallProbabilities(FContext *gs, int index_seat) const {$/;"	f	class:Freedom5::Histogramm
getFoldCallProbabilities	src/round_histogramm.cpp	/^tuple<double, double> RoundHistogramm::getFoldCallProbabilities() const {$/;"	f	class:Freedom5::RoundHistogramm
getFoldCallRaiseProbabilities	src/histogramm.cpp	/^        Histogramm::getFoldCallRaiseProbabilities(FContext *gs, int index_seat) const {$/;"	f	class:Freedom5::Histogramm
getFoldCallRaiseProbabilities	src/round_histogramm.cpp	/^RoundHistogramm::getFoldCallRaiseProbabilities() const {$/;"	f	class:Freedom5::RoundHistogramm
get_action_probability	src/histogramm.cpp	/^    double Histogramm::get_action_probability(Action action,$/;"	f	class:Freedom5::Histogramm
get_action_probability	src/round_histogramm.cpp	/^double RoundHistogramm::get_action_probability(ActionType::Enum action) {$/;"	f	class:Freedom5::RoundHistogramm
get_best_hand	src/range_predictor.cpp	/^Hand RangePredictor::get_best_hand(vector<unsigned> board, vector<unsigned> deadcards){$/;"	f	class:Freedom5::RangePredictor
get_bet_raise_amount	src/fcontext.cpp	/^amt_bb FContext::get_bet_raise_amount(double factor) const {$/;"	f	class:Freedom5::FContext
get_bucket_index_including_nb_hands	src/bucket_collection.cpp	/^int BucketCollection::get_bucket_index_including_nb_hands(int nb_hands,$/;"	f	class:Freedom5::BucketCollection
get_ev	include/freedom/showdown_node.hpp	/^  virtual double get_ev() { return stats.mean(); }$/;"	f	class:Freedom5::ShowdownNode
get_ev	src/const_leaf_node.cpp	/^double ConstantLeafNode::get_ev() { return value; }$/;"	f	class:Freedom5::ConstantLeafNode
get_fixed_win	src/showdown_eval.cpp	/^amt_bb ShowdownEval::get_fixed_win(FContext *context) const {$/;"	f	class:Freedom5::ShowdownEval
get_hand	src/weighted_bucket_handlist.cpp	/^Handlist::BitsetType WeightedBucketHandlist::get_hand($/;"	f	class:Freedom5::WeightedBucketHandlist
get_hands	src/weighted_bucket_handlist.cpp	/^void WeightedBucketHandlist::get_hands(HandCollection &hands) {$/;"	f	class:Freedom5::WeightedBucketHandlist
get_last_active_seat	src/fcontext.cpp	/^FSeat FContext::get_last_active_seat() const {$/;"	f	class:Freedom5::FContext
get_model	src/fconfig.cpp	/^    Model* FConfig::get_model(string name){$/;"	f	class:Freedom5::FConfig
get_nb_samples	include/freedom/showdown_node.hpp	/^  int get_nb_samples() { return stats.num_data_values(); }$/;"	f	class:Freedom5::ShowdownNode
get_not_winnable_pot	src/showdown_eval.cpp	/^amt_bb ShowdownEval::get_not_winnable_pot(FContext *context) const {$/;"	f	class:Freedom5::ShowdownEval
get_std_dev	include/freedom/showdown_node.hpp	/^  double get_std_dev() { return stats.standard_deviation(); }$/;"	f	class:Freedom5::ShowdownNode
get_std_dev	src/const_leaf_node.cpp	/^double ConstantLeafNode::get_std_dev() { return 0; }$/;"	f	class:Freedom5::ConstantLeafNode
get_variance	include/freedom/showdown_node.hpp	/^  double get_variance() { return stats.variance(); }$/;"	f	class:Freedom5::ShowdownNode
get_variance	src/const_leaf_node.cpp	/^double ConstantLeafNode::get_variance() { return 0; }$/;"	f	class:Freedom5::ConstantLeafNode
hand_bucket_range	src/bucket_collection.cpp	/^vector<BucketHand> BucketCollection::hand_bucket_range(int lower_bound,$/;"	f	class:Freedom5::BucketCollection
hand_combinations	src/range_predictor.cpp	/^vector<BucketHand> RangePredictor::hand_combinations(vector<unsigned> deadcards) {$/;"	f	class:Freedom5::RangePredictor
handlist	include/freedom/fplayer.hpp	/^  Handlist *handlist;$/;"	m	class:Freedom5::FPlayer
handranks	include/freedom/freedom.hpp	/^  Handranks* handranks;$/;"	m	class:Freedom5::Freedom
has_bet	src/fcontext.cpp	/^bool FContext::has_bet() const { return (highest_bet != amt_bb_cast(0)); }$/;"	f	class:Freedom5::FContext
highest_bet	include/freedom/fcontext.hpp	/^  bb highest_bet;$/;"	m	class:Freedom5::FContext
histogramm	include/freedom/histogramm.hpp	/^  vector<PhaseHistogramm> histogramm;$/;"	m	class:Freedom5::Histogramm
index_active	include/freedom/fcontext.hpp	/^  int index_active;$/;"	m	class:Freedom5::FContext
index_bot	include/freedom/fcontext.hpp	/^  int index_bot;$/;"	m	class:Freedom5::FContext
index_button	include/freedom/fcontext.hpp	/^  int index_button;$/;"	m	class:Freedom5::FContext
index_utg	include/freedom/fcontext.hpp	/^  int index_utg;$/;"	m	class:Freedom5::FContext
invested	include/freedom/fplayer.hpp	/^  vector<bb> invested;$/;"	m	class:Freedom5::FPlayer
is_active	src/fseat.cpp	/^bool FSeat::is_active() const { return status == StatusType::Active; }$/;"	f	class:Freedom5::FSeat
is_allin	src/fseat.cpp	/^bool FSeat::is_allin() const { return status == StatusType::Allin; }$/;"	f	class:Freedom5::FSeat
is_cached	include/freedom/weighted_showdown_eval.hpp	/^  bool is_cached(string key) const{$/;"	f	class:Freedom5::WeightedShowdownEval
is_inactive	src/fseat.cpp	/^bool FSeat::is_inactive() const { return status == StatusType::Inactive; }$/;"	f	class:Freedom5::FSeat
is_last_to_act	src/fcontext.cpp	/^bool FContext::is_last_to_act() const {$/;"	f	class:Freedom5::FContext
is_terminal	src/fcontext.cpp	/^bool FContext::is_terminal() const {$/;"	f	class:Freedom5::FContext
is_utg_index_reachable	src/fcontext.cpp	/^bool FContext::is_utg_index_reachable() const {$/;"	f	class:Freedom5::FContext
is_weak_call_or_raise	src/range_predictor.cpp	/^bool RangePredictor::is_weak_call_or_raise(Action action, bool is_postflop) {$/;"	f	class:Freedom5::RangePredictor
lambda	include/freedom/exponential_distribution.hpp	/^  double lambda;$/;"	m	class:Freedom5::ExponentialDistribution
last_action	include/freedom/fcontext.hpp	/^  Action last_action;$/;"	m	class:Freedom5::FContext
load_phase	src/fcontext.cpp	/^PhaseType::Enum FContext::load_phase(const Value &data) {$/;"	f	class:Freedom5::FContext
load_players	src/fcontext.cpp	/^void FContext::load_players(const Value &data) {$/;"	f	class:Freedom5::FContext
load_status	src/fseat.cpp	/^StatusType::Enum FSeat::load_status(const Value &data) {$/;"	f	class:Freedom5::FSeat
lookup_backprop_strat	include/freedom/strategy_map.hpp	/^static IBackpropagationStrategy *lookup_backprop_strat(string strategy) {$/;"	f	namespace:Freedom5::StrategyMap
lookup_selection_strat	include/freedom/strategy_map.hpp	/^static ISelectionStrategy<Context, Config> *lookup_selection_strat(string strategy) {$/;"	f	namespace:Freedom5::StrategyMap
make_investment	src/fplayer.cpp	/^bool FPlayer::make_investment(bb amount, PhaseType::Enum phase) {$/;"	f	class:Freedom5::FPlayer
map_hands	src/balanced_bucketizer.cpp	/^BalancedBucketizer::map_hands(int nb_buckets,$/;"	f	class:Freedom5::BalancedBucketizer
map_hands	src/exponential_bucketizer.cpp	/^ExponentialBucketizer::map_hands(int nb_buckets,$/;"	f	class:Freedom5::ExponentialBucketizer
model	include/freedom/fplayer.hpp	/^  string model;$/;"	m	class:Freedom5::FPlayer
model	include/freedom/model_selector.hpp	/^            Model *model;$/;"	m	class:Freedom5::ModelSelector
model_map	include/freedom/fconfig.hpp	/^  typedef std::unordered_map<std::string, Model *> model_map;$/;"	t	class:Freedom5::FConfig
models	include/freedom/fconfig.hpp	/^  model_map models;$/;"	m	class:Freedom5::FConfig
modify_range	src/weighted_showdown_eval.cpp	/^WeightedShowdownEval::modify_range(const vector<double> &bucket_probabilities,$/;"	f	class:Freedom5::WeightedShowdownEval
move_selection_strat	include/freedom/fconfig.hpp	/^  sstrategy_t *move_selection_strat() { return move_selection_strat_; }$/;"	f	class:Freedom5::FConfig
move_selection_strat_	include/freedom/fconfig.hpp	/^  sstrategy_t *move_selection_strat_;$/;"	m	class:Freedom5::FConfig
name	include/freedom/fplayer.hpp	/^  string name;$/;"	m	class:Freedom5::FPlayer
name	include/freedom/model.hpp	/^  string name;$/;"	m	class:Freedom5::Model
nb_all_nbet	include/freedom/round_histogramm.hpp	/^  double nb_all_nbet; \/\/ no bet$/;"	m	class:Freedom5::RoundHistogramm
nb_all_wbet	include/freedom/round_histogramm.hpp	/^  double nb_all_wbet; \/\/ with bet$/;"	m	class:Freedom5::RoundHistogramm
nb_bet	include/freedom/round_histogramm.hpp	/^  double nb_bet;$/;"	m	class:Freedom5::RoundHistogramm
nb_buckets	include/freedom/bucket_collection.hpp	/^  int nb_buckets;$/;"	m	class:Freedom5::BucketCollection
nb_buckets	include/freedom/range_predictor.hpp	/^  vector<int> nb_buckets;$/;"	m	class:Freedom5::RangePredictor
nb_call	include/freedom/round_histogramm.hpp	/^  double nb_call;$/;"	m	class:Freedom5::RoundHistogramm
nb_check	include/freedom/round_histogramm.hpp	/^  double nb_check;$/;"	m	class:Freedom5::RoundHistogramm
nb_fold	include/freedom/round_histogramm.hpp	/^  double nb_fold;$/;"	m	class:Freedom5::RoundHistogramm
nb_gen	include/freedom/fconfig.hpp	/^  generator_t *nb_gen() { return nb_gen_; }$/;"	f	class:Freedom5::FConfig
nb_gen_	include/freedom/fconfig.hpp	/^  generator_t *nb_gen_;$/;"	m	class:Freedom5::FConfig
nb_player_active	src/fcontext.cpp	/^int FContext::nb_player_active() const {$/;"	f	class:Freedom5::FContext
nb_player_allin	src/fcontext.cpp	/^int FContext::nb_player_allin() const {$/;"	f	class:Freedom5::FContext
nb_player_inactive	src/fcontext.cpp	/^int FContext::nb_player_inactive() const {$/;"	f	class:Freedom5::FContext
nb_player_not_inactive	src/fcontext.cpp	/^int FContext::nb_player_not_inactive() const {$/;"	f	class:Freedom5::FContext
nb_raise	include/freedom/round_histogramm.hpp	/^  double nb_raise;$/;"	m	class:Freedom5::RoundHistogramm
nb_samples	include/freedom/range_predictor.hpp	/^  int nb_samples;$/;"	m	class:Freedom5::RangePredictor
next_to_act	src/fcontext.cpp	/^int FContext::next_to_act() const {$/;"	f	class:Freedom5::FContext
next_utg	src/fcontext.cpp	/^int FContext::next_utg() const {$/;"	f	class:Freedom5::FContext
node	include/freedom/model_selector.hpp	/^        node_t* node;$/;"	m	struct:Freedom5::PAction
node_t	include/freedom/betamt_ev_ratio_selector.hpp	/^    typedef typename INode<Context, Config>::node_t node_t;$/;"	t	class:Freedom5::BetamtEVRatioSelector
node_t	include/freedom/decision_node.hpp	/^  typedef typename INode<Context, Config>::node_t node_t;$/;"	t	class:Freedom5::DecisionNode
node_t	include/freedom/ev_pot_ratio_selector.hpp	/^    typedef typename INode<Context, Config>::node_t node_t;$/;"	t	class:Freedom5::EVPotRatioSelector
node_t	include/freedom/final_move_selector.hpp	/^  typedef typename INode<Context, Config>::node_t node_t;$/;"	t	class:Freedom5::FinalMoveSelector
node_t	include/freedom/model_selector.hpp	/^        typedef typename INode<Context, Config>::node_t node_t;$/;"	t	class:Freedom5::ModelSelector
node_t	include/freedom/model_selector.hpp	/^        typedef typename INode<Context, Config>::node_t node_t;$/;"	t	struct:Freedom5::PAction
normalized_probabilities	src/model_selector.cpp	/^    vector<PAction> ModelSelector::normalized_probabilities(INode* node){$/;"	f	class:Freedom5::ModelSelector
o	include/freedom/gaussian_distribution.hpp	/^  double o;$/;"	m	class:Freedom5::GaussianDistribution
operator !=	include/freedom/bucket_hand.hpp	/^  bool operator!=(const BucketHand &oh) const { return !(*this == oh); }$/;"	f	class:Freedom5::BucketHand
operator ()	include/freedom/exponential_distribution.hpp	/^  double operator()(double x) { return lambda * exp(-(lambda * x)); }$/;"	f	class:Freedom5::ExponentialDistribution
operator ()	include/freedom/gaussian_distribution.hpp	/^  double operator()(double x) {$/;"	f	class:Freedom5::GaussianDistribution
operator <	include/freedom/bucket_hand.hpp	/^  bool operator<(const BucketHand &oh) const { return equity < oh.equity; }$/;"	f	class:Freedom5::BucketHand
operator <=	include/freedom/bucket_hand.hpp	/^  bool operator<=(const BucketHand &oh) const { return equity <= oh.equity; }$/;"	f	class:Freedom5::BucketHand
operator =	include/freedom/fseat.hpp	/^  FSeat operator=(const FSeat &s) {$/;"	f	class:Freedom5::FSeat
operator =	src/fcontext.cpp	/^FContext &FContext::operator=(const FContext &fc) {$/;"	f	class:Freedom5::FContext
operator =	src/fplayer.cpp	/^FPlayer &FPlayer::operator=(const FPlayer &p) {$/;"	f	class:Freedom5::FPlayer
operator ==	include/freedom/bucket_hand.hpp	/^  bool operator==(const BucketHand &oh) const { return equity == oh.equity; }$/;"	f	class:Freedom5::BucketHand
operator >	include/freedom/bucket_hand.hpp	/^  bool operator>(const BucketHand &oh) const { return equity > oh.equity; }$/;"	f	class:Freedom5::BucketHand
operator >=	include/freedom/bucket_hand.hpp	/^  bool operator>=(const BucketHand &oh) const { return equity >= oh.equity; }$/;"	f	class:Freedom5::BucketHand
operator []	src/bucket_collection.cpp	/^BucketCollection::Bucket &BucketCollection::operator[](unsigned int i) { return buckets[i]; }$/;"	f	class:Freedom5::BucketCollection
operator []	src/bucket_collection.cpp	/^const BucketCollection::Bucket &BucketCollection::operator[](unsigned int i) const {$/;"	f	class:Freedom5::BucketCollection
opponent_backprop_strat	include/freedom/fconfig.hpp	/^  IBackpropagationStrategy *opponent_backprop_strat;$/;"	m	class:Freedom5::FConfig
opponent_selection_strat	include/freedom/fconfig.hpp	/^  sstrategy_t *opponent_selection_strat;$/;"	m	class:Freedom5::FConfig
phase	include/freedom/fcontext.hpp	/^  PhaseType::Enum phase;$/;"	m	class:Freedom5::FContext
player	include/freedom/fseat.hpp	/^  FPlayer player;$/;"	m	class:Freedom5::FSeat
postflop	include/freedom/range_predictor.hpp	/^  double preflop, postflop;$/;"	m	struct:Freedom5::Threshold
pot	include/freedom/fcontext.hpp	/^  bb pot;$/;"	m	class:Freedom5::FContext
pr	include/freedom/freedom.hpp	/^  RangePredictor *pr;$/;"	m	class:Freedom5::Freedom
predict_range	include/freedom/range_predictor.hpp	/^  vector<Hand> predict_range(ActionSequence actions, Model *model,$/;"	f	class:Freedom5::RangePredictor
preflop	include/freedom/range_predictor.hpp	/^  double preflop, postflop;$/;"	m	struct:Freedom5::Threshold
prob	include/freedom/model_selector.hpp	/^        double prob;$/;"	m	struct:Freedom5::PAction
ptr	include/freedom/freedom.hpp	/^  typedef shared_ptr<Freedom> ptr;$/;"	t	class:Freedom5::Freedom
raise_sizes	include/freedom/fcontext_config.hpp	/^  vector<double> raise_sizes;$/;"	m	struct:Freedom5::FContextConfig
rake_factor	include/freedom/fcontext_config.hpp	/^  double rake_factor;$/;"	m	struct:Freedom5::FContextConfig
range_sequence	include/freedom/weighted_bucket_handlist.hpp	/^  ActionSequence range_sequence;$/;"	m	class:Freedom5::WeightedBucketHandlist
rapidjson_exception	include/freedom/schema_exception.hpp	/^  rapidjson_exception(const char *error = "Message Parse Error")$/;"	f	class:Freedom5::rapidjson_exception
rapidjson_exception	include/freedom/schema_exception.hpp	/^class rapidjson_exception : public std::runtime_error {$/;"	c	namespace:Freedom5
readModels	src/fconfig.cpp	/^    void FConfig::readModels(const Value &data) {$/;"	f	class:Freedom5::FConfig
remove_empty_buckets	src/bucket_collection.cpp	/^BucketCollection BucketCollection::remove_empty_buckets() {$/;"	f	class:Freedom5::BucketCollection
resolve_action	src/faction_sequence.cpp	/^ActionType::Enum FActionSequence::resolve_action(string action) {$/;"	f	class:Freedom5::FActionSequence
round_data	include/freedom/phase_histogramm.hpp	/^  vector<RoundHistogramm> round_data;$/;"	m	class:Freedom5::PhaseHistogramm
samples	include/freedom/showdown_eval.hpp	/^  int samples;$/;"	m	class:Freedom5::ShowdownEval
seats	include/freedom/fcontext.hpp	/^  vector<FSeat> seats;$/;"	m	class:Freedom5::FContext
select	include/freedom/betamt_ev_ratio_selector.hpp	/^  node_t *select(node_t *node) {$/;"	f	class:Freedom5::BetamtEVRatioSelector
select	include/freedom/final_move_selector.hpp	/^  node_t *select(node_t *node) {$/;"	f	class:Freedom5::FinalMoveSelector
select	src/model_selector.cpp	/^    INode *ModelSelector::select(INode *node) {$/;"	f	class:Freedom5::ModelSelector
select_child	src/decision_node.cpp	/^INode *DecisionNode::select_child() {$/;"	f	class:Freedom5::DecisionNode
select_child	src/opponent_node.cpp	/^    INode *OpponentNode::select_child() {$/;"	f	class:Freedom5::OpponentNode
serialize	src/fcontext.cpp	/^void FContext::serialize(Writer<FileStream> &writer) {$/;"	f	class:Freedom5::FContext
serialize	src/fplayer.cpp	/^void FPlayer::serialize(Writer<FileStream> &writer) {$/;"	f	class:Freedom5::FPlayer
serialize	src/fseat.cpp	/^void FSeat::serialize(Writer<FileStream> &writer) {$/;"	f	class:Freedom5::FSeat
serialize_fields	src/fcontext.cpp	/^void FContext::serialize_fields(Writer<FileStream> &writer) {$/;"	f	class:Freedom5::FContext
serialize_fields	src/fseat.cpp	/^void FSeat::serialize_fields(Writer<FileStream> &writer) {$/;"	f	class:Freedom5::FSeat
set_active	src/fseat.cpp	/^void FSeat::set_active() { status = StatusType::Active; }$/;"	f	class:Freedom5::FSeat
set_allin	src/fseat.cpp	/^void FSeat::set_allin() { status = StatusType::Allin; }$/;"	f	class:Freedom5::FSeat
set_ecalc	src/showdown_eval.cpp	/^void ShowdownEval::set_ecalc(ECalc *_ecalc, int _samples) {$/;"	f	class:Freedom5::ShowdownEval
set_inactive	src/fseat.cpp	/^void FSeat::set_inactive() { status = StatusType::Inactive; }$/;"	f	class:Freedom5::FSeat
simstrategy_t	include/freedom/fconfig.hpp	/^  typedef typename ISimulationStrategy<FContext>::simstrategy_t simstrategy_t;$/;"	t	class:Freedom5::FConfig
simulate	include/freedom/showdown_node.hpp	/^  virtual double simulate() {$/;"	f	class:Freedom5::ShowdownNode
simulate	src/const_leaf_node.cpp	/^double ConstantLeafNode::simulate() { return value; }$/;"	f	class:Freedom5::ConstantLeafNode
simulate	src/showdown_eval.cpp	/^double ShowdownEval::simulate(Context *context) {$/;"	f	class:Freedom5::ShowdownEval
simulate	src/weighted_showdown_eval.cpp	/^double WeightedShowdownEval::simulate(const FContext &context) {$/;"	f	class:Freedom5::WeightedShowdownEval
simulation_strat	include/freedom/fconfig.hpp	/^  simstrategy_t *simulation_strat;$/;"	m	class:Freedom5::FConfig
sqrt2PI	include/freedom/gaussian_distribution.hpp	/^  const double sqrt2PI = sqrt(2 * PI);$/;"	m	class:Freedom5::GaussianDistribution
sstrategy_t	include/freedom/fconfig.hpp	/^  sstrategy_t;$/;"	t	class:Freedom5::FConfig
stats	include/freedom/showdown_node.hpp	/^  RunningStats stats;$/;"	m	class:Freedom5::ShowdownNode
status	include/freedom/fseat.hpp	/^  StatusType::Enum status;$/;"	m	class:Freedom5::FSeat
target	makefile	/^    target = release$/;"	m
threshold	include/freedom/betamt_ev_ratio_selector.hpp	/^    double threshold;$/;"	m	class:Freedom5::BetamtEVRatioSelector
threshold	include/freedom/range_predictor.hpp	/^  Threshold threshold;$/;"	m	class:Freedom5::RangePredictor
threshold_min_hands	include/freedom/range_predictor.hpp	/^  int threshold_min_hands;$/;"	m	class:Freedom5::RangePredictor
time_s	include/freedom/fconfig.hpp	/^  double time_s;$/;"	m	class:Freedom5::FConfig
to_str	include/freedom/bucket_hand.hpp	/^  virtual std::string to_str(bool print_equity = false) const {$/;"	f	class:Freedom5::BucketHand
top_n_hands	src/range_predictor.cpp	/^vector<BucketHand> RangePredictor::top_n_hands(BucketCollection &buckets,$/;"	f	class:Freedom5::RangePredictor
total_investment	src/fplayer.cpp	/^bb FPlayer::total_investment() const {$/;"	f	class:Freedom5::FPlayer
transition	src/fcontext.cpp	/^Context *FContext::transition(Action action) {$/;"	f	class:Freedom5::FContext
transition	src/fcontext.cpp	/^vector<Context *> FContext::transition() {$/;"	f	class:Freedom5::FContext
transition_phase	src/fcontext.cpp	/^void FContext::transition_phase() {$/;"	f	class:Freedom5::FContext
u	include/freedom/gaussian_distribution.hpp	/^  double u;$/;"	m	class:Freedom5::GaussianDistribution
update_equities	src/range_predictor.cpp	/^RangePredictor::update_equities(vector<BucketHand> &overwrite,$/;"	f	class:Freedom5::RangePredictor
use_cache	include/freedom/range_predictor.hpp	/^  bool use_cache;$/;"	m	class:Freedom5::RangePredictor
value	include/freedom/const_leaf_node.hpp	/^  double value;$/;"	m	class:Freedom5::ConstantLeafNode
weight_sum	include/freedom/weighted_bucket_handlist.hpp	/^  virtual unsigned weight_sum(){$/;"	f	class:Freedom5::WeightedBucketHandlist
weights	include/freedom/weighted_bucket_handlist.hpp	/^  vector<double> weights;$/;"	m	class:Freedom5::WeightedBucketHandlist
winnable_pot	src/showdown_eval.cpp	/^amt_bb ShowdownEval::winnable_pot(FContext *context) const {$/;"	f	class:Freedom5::ShowdownEval
zerop_rc	include/freedom/range_predictor.hpp	/^  double zerop_rc;$/;"	m	class:Freedom5::RangePredictor
~BucketHand	include/freedom/bucket_hand.hpp	/^  ~BucketHand() {}$/;"	f	class:Freedom5::BucketHand
~ConstantLeafNode	src/const_leaf_node.cpp	/^ConstantLeafNode::~ConstantLeafNode() {}$/;"	f	class:Freedom5::ConstantLeafNode
~DecisionNode	src/decision_node.cpp	/^DecisionNode::~DecisionNode() { }$/;"	f	class:Freedom5::DecisionNode
~FConfig	src/fconfig.cpp	/^    FConfig::~FConfig() {$/;"	f	class:Freedom5::FConfig
~FContext	src/fcontext.cpp	/^FContext::~FContext() {}$/;"	f	class:Freedom5::FContext
~FContextConfig	src/fcontext_config.cpp	/^FContextConfig::~FContextConfig() {}$/;"	f	class:Freedom5::FContextConfig
~FPlayer	include/freedom/fplayer.hpp	/^  ~FPlayer(){}$/;"	f	class:Freedom5::FPlayer
~FSeat	include/freedom/fseat.hpp	/^  ~FSeat() {}$/;"	f	class:Freedom5::FSeat
~Freedom	src/freedom.cpp	/^Freedom::~Freedom() {$/;"	f	class:Freedom5::Freedom
~Model	include/freedom/model.hpp	/^  virtual ~Model() {}$/;"	f	class:Freedom5::Model
~OpponentNode	src/opponent_node.cpp	/^    OpponentNode::~OpponentNode() {$/;"	f	class:Freedom5::OpponentNode
~ShowdownEval	src/showdown_eval.cpp	/^ShowdownEval::~ShowdownEval() {}$/;"	f	class:Freedom5::ShowdownEval
~ShowdownNode	include/freedom/showdown_node.hpp	/^  virtual ~ShowdownNode(){}$/;"	f	class:Freedom5::ShowdownNode
~WeightedShowdownEval	src/weighted_showdown_eval.cpp	/^WeightedShowdownEval::~WeightedShowdownEval() {}$/;"	f	class:Freedom5::WeightedShowdownEval
